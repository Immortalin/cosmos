%main Relation Any;find_flag1 Relation Any Any Any;find_flag0 Relation Any Any;do_query Relation Any Any;interpreter Relation;eval_vars Relation Any Any Any Any;compile_module Relation Any Any Any;compile Relation Any Any Any;run_file Relation Any Any;compile_to_file Relation Any Any Any Any;run_query Relation Any Any Any Any Any;run_all Relation Any Any Any Any;Token FunctorObject;Cons FunctorObject
:- style_check([-singleton,-no_effect]), ensure_loaded("core.pl").
cosmos4(Env0,_e) :- obj_call2(Env0,"io","write",["RuntimeError: "]),writeln(_e).
cosmos3(Env0,_e) :- string_concat("CosmosError: ",_e,T66),obj_call2(Env0,"io","writeln",[T66]),false.
cosmos2(Env0,__,_y) :- eq(_y,_z).
cosmos1(Env0,_x,_s) :- string_concat("_",_x,T67),eq(_s,T67).
cosmos0(Env0,_e) :- string_concat("CosmosError: ",_e,T68),obj_call2(Env0,"io","writeln",[T68]).
:- ensure_loaded("lexer.pl").
:- ensure_loaded("parser.pl").
:- ensure_loaded("whitespacer.pl").
:- ensure_loaded("gen.pl").
cosmos_run_all(Env0,_s,_x,_module,_opts) :- obj_call2(Env0,"lexer","run",[_s,0,_l]),obj_call2(Env0,"whitespacer","run",[_l,_l2]),obj_call2(Env0,"parser","parse_world",[_l2,_,_fc]),obj_call2(Env0,"gen","generate_chunk",[_fc,_x,_module,_opts]).
cosmos_run_query(Env0,_s,_x,_prefix,_module,_query_vars) :- obj_call2(Env0,"lexer","run",[_s,0,_l]),obj_call2(Env0,"whitespacer","run",[_l,_l2]),(((obj_call2(Env0,"parser","parse_body",[_l2,_lfinal,_fc])),eq(_lfinal,'[|]'(fcToken(_,"EOF",_),[])));(obj_call2(Env0,"logic","throw",["cannot parse query"]))),obj_call2(Env0,"gen","generate_query",[_fc,_x,_prefix,_query_vars,_module]).
cosmos_compile_to_file(Env0,_module,_fname2,_code,_opts) :- string_concat("",_module,T37),dynamic_add(T37,".",T36),dynamic_add(T36,"cosmos",T35),eq(_name1,T35),obj_call2(Env0,"io","readFile",[_name1,_s]),env_call(Env0,"run_all",[Env0,_s,_code0,_module,_opts]),(((obj_call2(Env0,"list","has",[_opts,"--main"])),dynamic_add(_code0,"\nmain :- current_prolog_flag(argv, A), list_atom_string(A, B), ",T42),dynamic_add(T42,_module,T41),dynamic_add(T41,"_env(T), ",T40),dynamic_add(T40,_module,T39),dynamic_add(T39,"_main(T,B).",T38),eq(_code,T38));(eq(_code,_code0))),obj_call2(Env0,"io","writeToFile",[_fname2,_code]).
cosmos_run_file(Env0,_fname,_code) :- obj_call2(Env0,"io","readFile",[_fname,_s]),once(env_call(Env0,"run_all",[Env0,_s,_code,"temp",[]])).
cosmos_compile(Env0,_code_cosmos,_code_prolog,_module) :- once(env_call(Env0,"run_all",[Env0,_code_cosmos,_code_prolog,_module,[]])).
cosmos_compile_module(Env0,_module,_x,_opts) :- dynamic_add(_module,".",T44),dynamic_add(T44,"pl",T43),eq(_s2,T43),env_get(Env0,"compile_to_file",T45),obj_call2(Env0,"logic","applyCatch",[closure(T45,Env0),'[|]'(_module,'[|]'(_s2,'[|]'(_x,'[|]'(_opts,[])))),closure(cosmos0,Env0)]).
cosmos_eval_vars(Env0,_code,_prefix,_vars,_module) :- eq(_name,".temp.pl"),obj_call2(Env0,"list","map",[_vars,closure(cosmos1,Env0),_v2]),obj_call2(Env0,"list","join",[_v2,", ",_v3]),string_concat(":- style_check([-singleton,-no_effect]), ensure_loaded(\"core.pl\").\n",_prefix,T51),dynamic_add(T51,"temp(",T50),dynamic_add(T50,_v3,T49),dynamic_add(T49,") :- ",T48),dynamic_add(T48,_code,T47),dynamic_add(T47,".",T46),eq(_file_code,T46),obj_call2(Env0,"io","writeToFile",[_name,_file_code]),obj_call2(Env0,"list","map",[_vars,closure(cosmos2,Env0),_v4]),consult(_name),atom_string(_atom_temp,"temp"),atom_string(_atom_writeln,"writeln"),apply_forall_custom_vars(_atom_temp,_vars,_v4).
cosmos_interpreter(Env0) :- eq(_module,"temp"),obj_call2(Env0,"io","write",["> "]),obj_call2(Env0,"io","read",[_input]),(((env_get(Env0,"run_query",T52),obj_call2(Env0,"logic","applyCatch",[closure(T52,Env0),'[|]'(_input,'[|]'(_code,'[|]'(_prefix,'[|]'(_module,'[|]'(_vars,[]))))),closure(cosmos3,Env0)])),env_get(Env0,"eval_vars",T53),obj_call2(Env0,"logic","applyCatch",[closure(T53,Env0),'[|]'(_code,'[|]'(_prefix,'[|]'(_vars,'[|]'(_module,[])))),closure(cosmos4,Env0)]));true),env_call(Env0,"interpreter",[Env0]).
cosmos_do_query(Env0,_q,_name) :- string_concat("> ",_q,T54),obj_call2(Env0,"io","writeln",[T54]),env_call(Env0,"run_query",[Env0,_q,_code_query,_prefix,_name,_vars]),env_call(Env0,"eval_vars",[Env0,_code_query,"",_vars,"temp"]).
cosmos_find_flag0(Env0,_args,_flag) :- (((eq(_args, '[|]'(_a,_b))),(((eq(_a,_flag)),true);(env_call(Env0,"find_flag0",[Env0,_b,_flag]))));(false)).
cosmos_find_flag1(Env0,_args,_flag,_name) :- (((eq(_args, '[|]'(_a,_b))),eq(_b, '[|]'(_c,_d)),(((eq(_a,_flag)),eq(_c,_name));(env_call(Env0,"find_flag1",[Env0,_b,_flag,_name]))));(false)).
cosmos_main(Env0,_args) :- eq(_version,"Cosmos 0.04 (Abyss) very alpha"),(((env_call(Env0,"find_flag0",[Env0,_args,"-h"])),obj_call2(Env0,"io","writeln",[_version]),string_concat("-h\tGet help.\n","-i\tOpen interpreter.\n",T59),dynamic_add(T59,"-q [str]\tMake query.\n",T58),dynamic_add(T58,"--module [name]\t\tCompile name.cosmos to name.pl\n",T57),dynamic_add(T57,"--no-std-libs\t\tDon't load stdlibs.\n",T56),dynamic_add(T56,"\n\t e.g. cosmos --module test -q main(x) #compile test.cosmos and run main(x)",T55),obj_call2(Env0,"io","writeln",[T55]));((env_call(Env0,"find_flag1",[Env0,_args,"--module",_name])),(((env_call(Env0,"find_flag0",[Env0,_args,"--no-std-libs"])),eq(_opts,'[|]'("--no-std-libs",[])));(eq(_opts,[]))),(((env_call(Env0,"find_flag0",[Env0,_args,"--main"])),obj_call2(Env0,"list","push",[_opts,"--main",_opts2]),env_call(Env0,"compile_module",[Env0,_name,_code0,_opts2]),dynamic_add(_code0,"\nmain :- current_prolog_flag(argv, A), list_atom_string(A, B), ",T64),dynamic_add(T64,_name,T63),dynamic_add(T63,"_env(T), ",T62),dynamic_add(T62,_name,T61),dynamic_add(T61,"_main(T,B).",T60),eq(_code,T60));(env_call(Env0,"compile_module",[Env0,_name,_code,_opts]))),(((env_call(Env0,"find_flag1",[Env0,_args,"-q",_q])),dynamic_add(_name,".pl",T65),consult(T65),env_call(Env0,"do_query",[Env0,_q,_name]));true),(((env_call(Env0,"find_flag0",[Env0,_args,"-i"])),env_call(Env0,"interpreter",[Env0]));true));((env_call(Env0,"find_flag1",[Env0,_args,"-q",_q])),env_call(Env0,"do_query",[Env0,_q,"temp"]),(((env_call(Env0,"find_flag0",[Env0,_args,"-i"])),env_call(Env0,"interpreter",[Env0]));true));((env_call(Env0,"find_flag0",[Env0,_args,"-i"])),obj_call2(Env0,"io","writeln",[_version]),env_call(Env0,"interpreter",[Env0]))).
cosmos_env(X) :- new(X0),set(X0,"main",cosmos_main,X1),set(X1,"find_flag1",cosmos_find_flag1,X2),set(X2,"find_flag0",cosmos_find_flag0,X3),set(X3,"do_query",cosmos_do_query,X4),set(X4,"interpreter",cosmos_interpreter,X5),set(X5,"eval_vars",cosmos_eval_vars,X6),set(X6,"compile_module",cosmos_compile_module,X7),set(X7,"compile",cosmos_compile,X8),set(X8,"run_file",cosmos_run_file,X9),set(X9,"compile_to_file",cosmos_compile_to_file,X10),set(X10,"run_query",cosmos_run_query,X11),set(X11,"run_all",cosmos_run_all,X12),gen_env(Y12),set(X12,"gen",Y12,X13),whitespacer_env(Y13),set(X13,"whitespacer",Y13,X14),parser_env(Y14),set(X14,"parser",Y14,X15),lexer_env(Y15),set(X15,"lexer",Y15,X16),set(X16,"Token",cosmos_Token,X17),set(X17,"Cons",cosmos_Cons,X18),list_env(Y18),set(X18,"list",Y18,X19),string_env(Y19),set(X19,"string",Y19,X20),math_env(Y20),set(X20,"math",Y20,X21),io_env(Y21),set(X21,"io",Y21,X22),logic_env(Y22),set(X22,"logic",Y22,X23),set(X23,"Some",cosmos_Some,X24),set(X24,"None",cosmos_None,X25),set(X25,"Left",cosmos_Left,X26),set(X26,"Right",cosmos_Right,X27),X=X27.
main :- current_prolog_flag(argv, A), list_atom_string(A, B), cosmos_env(T), cosmos_main(T,B).